#!/usr/bin/perl -w
package Ratoh;

use Mojo::Base -strict;
use Mojo::Log;
use Mojo::URL;
use Mojo::UserAgent;
use Mojo::JSON::Pointer;
use Mojolicious::Plugin::Config;
use Net::AMQP::RabbitMQ;
use Mojo::JSON qw(decode_json);
use Mojo::Util qw(dumper getopt);
use Pod::Usage qw(pod2usage);

my $log = Mojo::Log->new(level => $ENV{RATOH_LOG} // 'debug');
my $url_paceholder_regex = qr#%\{([^\}]+)\}%#;

sub arg_parse {
    my $ret = getopt [@_], [qw(pass_through require_order)],
        'help|h' => \my $help,
        'help-extended' => \my $help_extended,
        'config|c=s' => \my $config
    ;

    return {
        config_file => $config,
        help => $help,
        help_extended => $help_extended
    };
}

sub send_http_request {
    my ($endpoint, $body, $log) = @_;
    my $url = $endpoint->{url};

    if($url =~ qr/$url_paceholder_regex/) {
        # Replace the %{/json/path}% pointers with the real value.
        my $pointer = Mojo::JSON::Pointer->new($body);
        my $placeholder_replace = sub {
            my $resolved_value = $pointer->get($1);
            $log->trace("Replace params: " . dumper({pointer => $1, resolved_value => $resolved_value}));
            return $resolved_value;
        };
        do { } while ($url =~ s/$url_paceholder_regex/$placeholder_replace->()/ge);
    }

    $log->debug("Endpoint URL: " . $url);
    $url = Mojo::URL->new($url);
    my $method = $endpoint->{method} // 'get';
    my $ua = Mojo::UserAgent->new();
    my $tx = $ua->build_tx($method => $url => {}, json => $body);
    $tx->req->headers->user_agent('RaToH/1.0.0');
    # Apply pre-request changes
    $endpoint->{pre_request}->($tx->req) if is_subroutine($endpoint->{pre_request});

    $tx = $ua->start($tx);

    $log->debug(sprintf("Response code from endpoint (%s): %d - %s", $tx->remote_address, $tx->res->code, $tx->res->message));

    return {
        remote_addr => $tx->remote_address,
        status_code => $tx->res->code,
        body => $tx->res->body,
        headers => $tx->res->headers->to_hash()
    };
}

sub is_subroutine {
    my ($rt) = @_;
    return (defined $rt) && (ref($rt) eq 'CODE');
}

sub is_http_status_error {
    my ($status) = @_;
    return $status && ($status < 200 || $status > 299);
}

sub notify_endpoint {
    my ($endpoint, $message) = @_;
    my $log = $log->context($message->{consumer_tag}, $message->{delivery_tag});
    $log->info("START - Notifying endpoint");

    my $body = $message->{body};
    my $body_parser = $endpoint->{body_parser} // 'PARSE_JSON';

    if ($body_parser eq 'PARSE_JSON') {
        eval { $body = decode_json($message->{body}) };
    } elsif (is_subroutine $endpoint->{body_parser}) {
        # or do something arbitrary...
        eval { $body = $endpoint->{body_parser}->($body, $message) };
    }

    if ($@) {
        $log->trace("Falling back to empty JSON body, JSON Parsing broke with: $@");
        $body = {};
    }

    $message->{body} = $body;

    if (is_subroutine($endpoint->{message_filter}) && !$endpoint->{message_filter}->($message)) {
        $log->trace("Message was filtered out, skipping endpoint");
        goto END_NOTIFICATION_LOOP;
    }

    my $response = send_http_request($endpoint, $message, $log);
    my $resp_code = $response->{status_code};
    if (is_http_status_error($resp_code) && is_subroutine($endpoint->{on_error})) {
        $log->debug("Calling error handler");
        $endpoint->{on_error}->($response, $message);
    }

  END_NOTIFICATION_LOOP:
    $log->info("DONE - Notifying endpoint");
}

sub connect_to_rabbitmq {
    my ($config) = @_;
    my $mq = Net::AMQP::RabbitMQ->new();
    my $conn_params = $config->{conn_params};
    $conn_params->{port} //= ($conn_params->{ssl} ? 5671 : 5672);
    $conn_params->{queue} //= '';
    $log->info('Connecting to RabbitMQ: ' . $config->{host});
    $log->trace('Connection information: ' . dumper(
            {
                user => $conn_params->{user},
                queue => $conn_params->{queue},
                channel => $conn_params->{channel},
                exchange => $conn_params->{exchange},
                routing_key => $conn_params->{routing_key},
            }
        )
    );

    $mq->connect($config->{host}, $conn_params);

    $log->trace('Opening channel');
    $mq->channel_open($conn_params->{channel});

    $log->trace('Declaring queue');
    my $queuename = $mq->queue_declare(1, $conn_params->{queue});

    $log->info('Binding to queue: ' . $queuename);
    $mq->queue_bind($conn_params->{channel}, $queuename, $conn_params->{exchange}, $conn_params->{routing_key});
    $mq->consume($conn_params->{channel}, $queuename);

    return $mq;
}

my $args = arg_parse(@ARGV);

if ($args->{help}) {
    pod2usage(-exitval => 0);
}

if ($args->{help_extended}) {
    pod2usage(-exitval => 0, -verbose => 2);
}

if (!defined($args->{config_file})) {
    pod2usage(-exitval => 1);
}

my $cfg_file_path = $args->{config_file};
die("Config file $cfg_file_path does not exist.") unless -e $cfg_file_path;

my $config = Mojolicious::Plugin::Config->load($cfg_file_path);

# sane defaults
$config->{run_mode} //= 'forever';
my $endpoint = $config->{endpoint};

$log->info('Ra-to-H Starts!');

my $retries = 10;
$log->trace("Endpoint configuration: " . dumper($endpoint));

MAIN_LOOP: while (1) {
    my $mq;
    eval { $mq = connect_to_rabbitmq($config->{rabbit_mq}) };
    if ($@) {
        $log->error("Error on connection: $@");
        $log->error("Too many errors, bailing out.") and last if $retries == 0;

        $retries--;
        $log->info('Retrying in 5 seconds...');
        sleep 5 and next;
    }
    $retries = 10;

    $log->info('Connected! Awaiting for messages...');

    while (my $message = eval { $mq->recv(0) }) {
        $log->trace('Incoming message: ' . dumper($message));
        notify_endpoint($endpoint, $message);
        if ($config->{run_mode} eq 'stop_on_first_message') {
            $log->info('Stopping after first message');
            last MAIN_LOOP;
        }
    }

    if ($@) {
        $log->error("Error while connected: $@");
        # Disconnect and send to connection routine above.
        $mq->disconnect() and next;
    }
}

$log->info('Ra-to-H Ends!');

__END__

=head1 NAME

ratoh - B<Ra>bbit-B<to>-B<H>ttp bridge

=head1 DESCRIPTION

C<ratoh> connects to a RabbitMQ bus and forwards messages to an HTTP endpoint.

Using the following minimal config file:

    # contents of config.pm
    {
        rabbit_mq => {
            host => '127.0.0.1',
            conn_params => {
                timeout=> 10,
                user => 'guest',
                password => 'guest',
                channel => 1,
                exchange => 'amq.topic',
                routing_key => 'your.routing.*.key.#',
            }
        },
        endpoint => {
            url => 'http://127.0.0.1:3000/',
            method => 'post',
        }
    }

The then we can invoke C<ratoh> as:

    ratoh --config config.pm

=head1 SYNOPSIS

sample [options]

 Options:
   --config file, -c file  Ratoh config file.
   --help, -h              This help message.
   --help-extended         This help message.

=head1 OPTIONS

=over 4

=item B<--config>, B<-c>

Config file defining the RabbitMQ connection & HTTP Endpoint

=item B<--help>, B<-h>

Prints this help message

=item B<--help-extended>

Shows extended manual

=back

=cut